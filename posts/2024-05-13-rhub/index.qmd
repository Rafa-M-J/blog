---
title: "rhub와 Github action를 활용한 OS별 R 패키지 검증"
description: | 
  rhub 패키지와 Github action을 사용해 R 패키지를 다양한 OS에서 정상적으로 설치, 실행할 수 있도록 확인 하는 R CMD CHECK 방법을 소개합니다.
categories:
  - R
author:
  name: "Jinhwan Kim"
  email: jinhwan@zarathu.com
  url: https://github.com/jhk0530
image: img/logo.png
fig_width: 400
date: 2024-05-13
format: html
execute:
  freeze: true
draft: false
license: CC BY-NC
---

## R CMD CHECK

::: {.content-visible when-profile="ko"}

`R CMD CHECK`란 R 패키지를 개발한 이후 "정상적으로 개발 되었는지" 검증하는 약 50개 이상의 체크리스트를 실행하는 과정으로, 함수의 사용법이 제대로 작성되었는지, 함수의 parameter가 제대로 작성되었는지 등을 포함한다. 

물론 `R CMD CHECK`를 엄격하게 수행하지 않아도 github 를 통해 패키지를 배포하고 실행하는 것에 문제는 없지만, 이러한 과정을 통해 패키지의 오류를 최소화하고 사용자에게 안정적인 패키지를 제공할 수 있다는 것이 검증 되어야만 CRAN과 같은 공식 리포지토리를 통해 패키지를 공유할 수 있다.

이 포스팅에서는 구체적인 내용을 다루진 않지만, 관심이 있다면 Hadley Wickham의 <a href='https://r-pkgs.org/R-CMD-check.html' target = "_blank">R Packages</a>를 참고하는 것도 좋다.

아무튼 `R CMD CHECK` 는 `devtools`패키지를 사용하여 R 패키지를 만들었다면, `devtools::check()`함수 또는 Rstudio에서 `Check` 버튼으로 할 수 있고, Warnings, Errors, Notes 등을 통해 수정되길 권고하는 문제들을 확인할 수 있다.

:::

::: {.content-visible when-profile="en"}

The `R CMD CHECK` is a process that runs through about 50+ checklists to verify that an R package is “well-developed” after it has been developed, including whether a function's usage is well-written, whether a function's parameters are well-written, etc. 

Of course, there is nothing wrong with distributing and running your package via github without strictly performing an `R CMD CHECK`, but you should only share your package via an official repository like CRAN once you have proven that you can minimize errors in your package and deliver a stable package to your users.

This post won't go into specifics, but if you're interested, Hadley Wickham's <a href='https://r-pkgs.org/R-CMD-check.html' target=“_blank”>R Packages</a> is a good place to start.

In any case, `R CMD CHECK` can be done with the `devtools::check()` function or the `Check` button in Rstudio if you have created an R package using the `devtools` package, and you can check for issues that are recommended to be fixed with Warnings, Errors, Notes, etc.

:::

::: {.content-visible when-profile="jp"}

`R CMD CHECK`は、Rパッケージを開発した後に「正常に開発されているか」を検証するために、約50以上のチェックリストを実行するプロセスです。関数の使用方法が適切に記述されているか、関数のパラメータが適切に記述されているかなどが含まれます。

もちろん、`R CMD CHECK`を厳密に実行せずにgithubを介してパッケージを配布して実行することに問題はありませんが、パッケージのエラーを最小限に抑え、安定したパッケージをユーザーに提供できることが証明された後に、CRANなどの公式リポジトリを介してのみパッケージを共有するべきです。

この投稿では具体的な内容には触れませんが、興味がある場合はHadley Wickhamの<a href='https://r-pkgs.org/R-CMD-check.html' target="_blank">R Packages</a>を参照することもできます。

いずれにせよ、`R CMD CHECK`は、`devtools`パッケージを使用してRパッケージを作成した場合、`devtools::check()`関数またはRstudioの`Check`ボタンを使用して実行でき、警告、エラー、ノートなどで修正が推奨される問題を確認できます。

:::

<img src="img/check.png" width="100%"></img>

::: {.content-visible when-profile="ko"}

그러나 이 `R CMD CHECK`의 특징 중 한가지는 패키지를 개발하는 PC의 환경을 기준으로 체크를 진행한다는 것이다. 즉, 아래의 이미지 같은 경우 macOS (Apple clang) 환경에서는 패키지가 테스트 되었고 실행이 보장되지만 만약 사용자의 OS가 mac이 아닌 window, linux 같은 경우에는 패키지가 정상적으로 작동하지 않을 수도 있다.

CRAN은 기본 OS를 정하지 않고 있지만 Windows, macOS, linux 중 최소 2개 이상의 OS에서의 테스트에서 문제가 없길 요구하는 만큼 R 패키지를 개발하는 것은 다양한 OS에서의 테스트를 포함하기도 한다.

이를 위해 다양한 OS 하드웨어, 즉 windows PC, mac, linux 서버가 있다면 베스트겠지만 이러한 경우는 많지 않고 대부분 Github action, AppVeyor, Travis CI 등의 CI/CD 서비스를 활용해 다양한 OS에서의 테스트를 수행하게 된다.

:::

::: {.content-visible when-profile="en"}

However, one of the features of `R CMD CHECK` is that it checks based on the environment of the PC on which the package is developed. In the image below, the package is tested and guaranteed to run in the macOS (Apple clang) environment, but if the user's OS is not mac, such as window or linux, the package may not work properly.

Developing R packages often involves testing on a variety of OSes, as CRAN does not specify a preferred OS, but requires tests to work on at least two of Windows, macOS, and linux.

For this purpose, it would be great to have a variety of OS hardware, i.e. windows PC, mac, linux servers, but this is rarely the case and most of the time we use CI/CD services like Github actions, AppVeyor, Travis CI, etc. to perform testing on different OS.

:::

::: {.content-visible when-profile="jp"}

しかし、`R CMD CHECK`の特徴の1つは、パッケージを開発しているPCの環境を基準にチェックを行うということです。つまり、下の画像のようにmacOS（Apple clang）環境でパッケージがテストされ、実行が保証されていますが、ユーザーのOSがmac以外のwindow、linuxなどの場合、パッケージが正常に動作しない可能性があります。

CRANは基本OSを指定していませんが、Windows、macOS、linuxの少なくとも2つのOSでのテストに問題がないことを要求するため、Rパッケージの開発にはさまざまなOSでのテストが含まれることがよくあります。

このため、さまざまなOSハードウェア、つまりWindows PC、mac、Linuxサーバーがあればベストですが、このようなケースは多くなく、ほとんどの場合、Githubアクション、AppVeyor、Travis CIなどのCI/CDサービスを使用してさまざまなOSでのテストを実行します。

:::

## Github action

::: {.content-visible when-profile="ko"}

이 포스팅에서는 Github action을 기준으로 소개하지만 다른 서비스도 과정과 프로세스는 대동소이하다.

Github action은 Github에서 제공하는 CI/CD 서비스로, Github에서 제공하는 다양한 Action을 사용하여 (github 이 제공하는 서버에서의 명령어 실행을 통해) 자동화된 테스트, 빌드, 배포 등을 수행할 수 있다.

:::

::: {.content-visible when-profile="en"}

In this post, I will introduce GitHub action as a reference, but the process is similar for other services.

Github action is a CI/CD service provided by Github that allows you to perform automated testing, builds, deployments, and more (by running commands on a server provided by github) using various actions provided by Github.

:::

::: {.content-visible when-profile="jp"}

この投稿では、参考としてGithubアクションを紹介しますが、他のサービスでもプロセスはほぼ同じです。

Githubアクションは、Githubが提供するCI/CDサービスで、Githubが提供するさまざまなアクションを使用して（Githubが提供するサーバーでコマンドを実行することにより）、自動化されたテスト、ビルド、デプロイなどを実行できます。

:::

<img src="img/gha.png" width="100%"></img>

::: {.content-visible when-profile="ko"}

여기서 Action이란 yml 파일로 구성된 명령어들의 모음 정도로 생각해도 충분하며, 예시로는 
서버에 R을 설치하기, R 패키지를 설치하기, R CMD CHECK를 실행하기 등이 있다. <a href='https://github.com/r-hub/actions' target="_blank">R-hub action 모음</a>, <a href='https://github.com/r-lib/actions' target="_blank">R-lib action 모음</a> 참고.

즉, 이 `R CMD CHECK`를 포함한 Action들을 github action을 통해 server에서 실행하고 그 결과를 확인하여 CRAN에 올리는 과정을 거치게 되는데 github action의 문제점 중 하나는 아래의 예시와 같이 action을 사용하기 위한 yml 문법이 상당히 이질적이라는 것이다.

:::

::: {.content-visible when-profile="en"}

An Action can be thought of as a collection of commands organized in a yml file, such as installing R on a server, installing an R package, or running R CMD CHECK. <a href='https://github.com/r-hub/actions' target="_blank">R-hub actions</a>, <a href='https://github.com/r-lib/actions' target="_blank">R-lib actions</a> for references.

In other words, the actions including this `R CMD CHECK` are executed on the server through github action, and the results are checked and uploaded to CRAN. One of the problems with github action is that the yml syntax for using actions is quite heterogeneous, as shown in the example below.

:::

::: {.content-visible when-profile="jp"}

アクションは、サーバーにRをインストールしたり、Rパッケージをインストールしたり、R CMD CHECKを実行したりするなど、ymlファイルで構成されたコマンドのコレクションと考えることができます。 

<a href='https://github.com/r-hub/actions' target="_blank">R-hub actions</a>, <a href='https://github.com/r-lib/actions' target="_blank">R-lib actions</a> 参考までに。

:::

<img src="img/yml.png" width="100%"></img>

## r-hub2

::: {.content-visible when-profile="ko"}

r-hub 프로젝트는 R 컨소시엄의 프로젝트 중 하나로, R 개발자들이 R 패키지를 더 잘 개발할 수 있게 하는 목적을 가지고 있다. 다양한 OS에서의 테스트를 수행하는 것을 돕는 것 또한 그 중 하나로 위에서 언급한 Github Action을 개발한다거나 인프라를 제공하거나, 커뮤니티를 통해 문제 해결을 돕는 등의 역할이 있다.

그런데 이 R-hub 프로젝트에서 최근 이 GHA 설정을 돕기 위한 R 패키지, `rhub`를 개발하여 공개했다. 

공식 블로그에 설명 되어 있는 것처럼, 사용 방법은 기존의 Github Action을 사용하지 않았더라도 다양한 OS에서 `R CMD CHECK`를 손쉽게 수행할 수 있는 Github Action을 설정할 수 있다.

제일 먼저 해야하는 것은 당연하게도 `rhub` 패키지를 설치하는 것이다. 여기서 `pak`은 기존의 `install.packages`와 `remotes::install_github` 같이 다양한 소스에서의 R 패키지 설치를 통합하여 지원하는 함수로 기존의 패키지 설치 방법들을 대체하기를 권장하고 있다.

:::

::: {.content-visible when-profile="en"}

The r-hub project is one of the projects of the R Consortium, whose purpose is to help R developers better develop R packages. One of its roles is to help perform testing on different OSes, and it does this by developing the Github actions mentioned above, providing infrastructure, and helping the community solve problems.

However, the R-hub project has recently developed and released an R package, `rhub`, to help you set up this GHA.

As explained in the official blog, you can use it to set up a Github Action that allows you to easily perform `R CMD CHECK` on various OS, even if you didn't already used a Github Action.

The first thing we need to do is, of course, install the `rhub` package. Here, `pak` is recommended to replace traditional package installation methods such as `install.packages` and `remotes::install_github` with a function that provides unified support for installing R packages from various sources.

:::

::: {.content-visible when-profile="jp"}

r-hubプロジェクトは、Rコンソーシアムのプロジェクトの1つであり、R開発者がRパッケージをより良く開発できるようにすることを目的としています。 さまざまなOSでのテストを実行することを支援することもその1つで、上記で言及したGithub Actionを開発したり、インフラを提供したり、コミュニティが問題を解決するのを支援したりする役割があります。

しかし、R-hubプロジェクトは最近、このGHAを設定するのを助けるためのRパッケージ、`rhub`を開発してリリースしました。

公式ブログで説明されているように、すでにGithub Actionを使用していなくても、さまざまなOSで`R CMD CHECK`を簡単に実行できるGithub Actionを設定できます。

最初にやるべきことは、もちろん`rhub`パッケージをインストールすることです。 ここで、`pak`は、`install.packages`や`remotes::install_github`などの従来のパッケージインストール方法を統合し、さまざまなソースからRパッケージをインストールするための関数を提供することを推奨しています。

:::


``` r
pak::pkg_install("rhub")
```

::: {.content-visible when-profile="ko"}

주의할 점으로 `rhub` 패키지는 공식적인 버전은 2이지만 `rhub2`가 아닌 `rhub`로 설치, 실행해야 하며 포스팅에서는 `rhub`로 표기하겠다.

이 `rhub` 패키지를 실행하기 위해서는 아래 3가지가 필요한데, R 패키지를 개발하여 github에 공유한 경험이 있다면 별도로 새롭게 준비해야 할 것은 없다.

1. github 계정
2. R package를 올린 repository. 이때 CRAN을 목적으로 한다면 당연히 Public이어야 한다. 
3. Github PAT (Personal Access Token), github 에서 발급 받을 수 있고, `gitcreds`라는 또 다른 R 패키지를 사용해도 좋다.

:::

::: {.content-visible when-profile="en"}

Note that the `rhub` package should be installed and run as `rhub`, not `rhub2`, although the official version is 2. 

In this post, I will refer to it as `rhub`.To run this `rhub` package, you need the following three things, but if you have experience developing R packages and sharing them on github, you don't need to prepare anything new.

1. A github account.
2. A repository where you uploaded the R package. If you want to CRAN it, it should be public. 
3. Github PAT (Personal Access Token), which can be obtained from github, or you can use another R package called `gitcreds`.

:::

::: {.content-visible when-profile="jp"}

`rhub`パッケージは、公式バージョンが2であるにもかかわらず、`rhub2`ではなく`rhub`としてインストールおよび実行する必要があることに注意してください。

この投稿では、それを`rhub`と呼びます。この`rhub`パッケージを実行するには、以下の3つが必要ですが、Rパッケージを開発してgithubに共有した経験がある場合、新たに準備する必要はありません。

1. githubアカウント
2. Rパッケージをアップロードしたリポジトリ。CRANを目指す場合は、もちろんPublicである必要があります。
3. Github PAT（Personal Access Token）、githubから取得でき、`gitcreds`という別のRパッケージを使用してもかまいません。

:::

### Setup

::: {.content-visible when-profile="ko"}

`rhub` 패키지를 마친 이후 제일 먼저 해야하는 것은 **R 패키지 디렉토리**에서 `rhub_setup` 함수를 실행하는 것이다.
이 함수의 역할은 디렉토리의 git repository를 인식하고, Github Action을 위한 yml 파일을 생성한다.

이전에 만들었던 `gemini.R` 패키지를 아래 이미지 예시로 사용했다.

:::

::: {.content-visible when-profile="en"}

The first thing to do after finishing the `rhub` package is to run the `rhub_setup` function in the **R package directory**, which recognizes the git repository in the directory and generates a yml file for the Github Action.

We used the `gemini.R` package we created earlier as an example in the image below.

:::

::: {.content-visible when-profile="jp"}

`rhub`パッケージを終えた後に最初に行うべきことは、**Rパッケージディレクトリ**で`rhub_setup`関数を実行することです。この関数はディレクトリ内のgitリポジトリを認識し、Github Action用のymlファイルを生成します。

以下の画像では、以前に作成した`gemini.R`パッケージを例にしています。

:::

<img src="img/setup.png" width="100%"></img>

::: {.content-visible when-profile="ko"}

큰 문제가 없다면, rhub 패키지에서는 이후 진행해야 할 단계도 안내해준다. 즉, 추가된 yml 파일이 추가된 내용을 github에 커밋하여 업데이트를 반영하고 난 뒤 `rhub_doctor` 함수를 실행한다.

:::

::: {.content-visible when-profile="en"}

If all goes well, the rhub package will also walk you through the next steps, which is to commit the added yml file to github to reflect the update and then run the `rhub_doctor` function.

:::

::: {.content-visible when-profile="jp"}

すべてがうまくいけば、rhubパッケージは次のステップについても案内してくれます。つまり、追加されたymlファイルをgithubにコミットして更新を反映させた後、`rhub_doctor`関数を実行します。

:::

### Doctor

::: {.content-visible when-profile="ko"}

`rhub_doctor` 함수에서는 Github PAT가 제대로 설정되어 있는지를 확인한다. 이후 소개할 `rhub`의 `rhub_check`함수는 Rstudio의 콘솔에서 언급한 Github PAT를 사용하여 수동으로 Github Action을 실행하는 역할을 하기 때문에 PAT의 설정 확인이 필요하다.

Github PAT는 "https://github.com/settings/tokens" 링크에서 생성하되 `repo`와 `workflow` 권한을 반드시 부여하여 생성해야하만 한다.

:::

::: {.content-visible when-profile="en"}

The `rhub_doctor` function checks if the Github PAT is set properly. The `rhub_check` function of `rhub`, which will be introduced later, is responsible for manually executing Github Actions using the mentioned Github PAT in Rstudio's console, so it is necessary to check the PAT settings.

The Github PAT can be created from the link “https://github.com/settings/tokens”, but only if you create it with the `repo` and `workflow` permissions granted.

:::

::: {.content-visible when-profile="jp"}

`rhub_doctor`関数は、Github PATが正しく設定されているかどうかを確認します。後で紹介する`rhub`の`rhub_check`関数は、Rstudioのコンソールで言及されたGithub PATを使用してGithub Actionを手動で実行するため、PATの設定を確認する必要があります。

Github PATは 「https://github.com/settings/tokens 」のリンクから作成できますが、`repo`と`workflow`のパーミッションを付与して作成した場合に限ります。

:::

<img src="img/pat.png" width="100%"></img>

::: {.content-visible when-profile="ko"}

Rstudio에 Github PAT를 설정 하는 방법은 `credential` 패키지의 `set_github_pat` 함수를 이용한다. <a href='https://forum.posit.co/t/how-to-i-use-a-new-github-pat/112700' target="_blank">링크 참고</a>

`rhub_doctor` 함수가 정상적으로 작동했다면 이제 남은 것은 rhub_check 함수를 실행하는 것이다.

:::

::: {.content-visible when-profile="en"}

To set the Github PAT for Rstudio, use the `set_github_pat` function in the `credential` package. <a href='https://forum.posit.co/t/how-to-i-use-a-new-github-pat/112700' target="_blank">See this</a>

If the `rhub_doctor` function worked correctly, all that's left is to run the rhub_check function.

:::

::: {.content-visible when-profile="jp"}

RstudioでGithub PATを設定する方法は、`credential`パッケージの`set_github_pat`関数を使用します。 <a href='https://forum.posit.co/t/how-to-i-use-a-new-github-pat/112700' target="_blank">リンク</a>

`rhub_doctor`関数が正常に動作した場合、残りの作業は`rhub_check`関数を実行することです。

:::

<img src="img/doctor.png" width="100%"></img>

### Check

::: {.content-visible when-profile="ko"}

이전 단계는 이 함수를 위한 준비 작업이었다 라고 해도 과언이 아니다. 

:::

::: {.content-visible when-profile="en"}

The previous steps were not an exaggeration to say that they were preparatory work for this function.

:::

::: {.content-visible when-profile="jp"}

前のステップは、この関数のための準備作業であったと言っても過言ではありません。

:::

<img src="img/check2.png" width="100%"></img>

::: {.content-visible when-profile="ko"}

`rhub_check` 함수는 github repository와 PAT를 인식한 다음 어떤 OS에서 `R CMD CHECK`를 수행할 것인지 입력값으로 받는다.

이 때 단순히 Windows, macOS, Linux 외에도 이미지처럼 (rhub 프로젝트에서 제공하는) 다양한 OS를 숫자와 쉼표를 통해 구분하여 선택할 수 있다.

함수를 실행한 후에는 GHA 페이지로 연결할 수 있는 링크를 제공하는데 이를 통해 진행 상황을 확인할 수 있다.

:::

::: {.content-visible when-profile="en"}

The `rhub_check` function recognizes the github repository and PAT, and then takes an input value on which OS to perform `R CMD CHECK`.

At this time, in addition to Windows, macOS, and Linux, you can select various OS (provided by the rhub project) by separating them with numbers and commas as shown in the image.

After running the function, it provides a link that can be connected to the GHA page, so you can check the progress through it.

:::

::: {.content-visible when-profile="jp"}

`rhub_check`関数は、githubリポジトリとPATを認識し、次に`R CMD CHECK`を実行するOSを入力値として受け取ります。

この時、Windows、macOS、Linuxに加えて、画像のように（rhubプロジェクトで提供される）さまざまなOSを数字とカンマで区切って選択することができます。

関数を実行した後、GHAページに接続できるリンクを提供し、進行状況を確認できます。

:::

<img src="img/actionpage.png" width="100%"></img>

::: {.content-visible when-profile="ko"}

최종적으로 rhub와 GHA를 사용한 테스트 패스를 repository에 뱃지로 추가하면 아래와 같이 나타난다.

:::

::: {.content-visible when-profile="en"}

Finally, when you add a test pass using rhub and GHA to the repository as a badge, it will look like the image below.

:::

::: {.content-visible when-profile="jp"}

最終的に、rhubとGHAを使用してテストパスをリポジトリにバッジとして追加すると、以下のようになります。

:::

<img src="img/badge.png" width="100%"></img>

::: {.content-visible when-profile="ko"}

이 때 readme에 뱃지 아이콘을 추가하기 위해서는 다음과 같이 작성해야한다.

:::

::: {.content-visible when-profile="en"}

To add a badge icon to the readme, you need to write as follows.

:::

::: {.content-visible when-profile="jp"}

バッジアイコンをreadmeに追加するには、次のように書く必要があります。

:::

```
![example workflow](https://github.com/<OWNER>/<REPOSITORY>/actions/workflows/<WORKFLOW_FILE>/badge.svg)
```

::: {.content-visible when-profile="ko"}

예시로 사용한 `gemini.R`은 <OWNER> 대신 jhk0530, <REPOSITORY> 대신 gemini.R, <WORKFLOW_FILE> 대신 rhub.yaml로 대체한다.

주의할 점으로 이 Github Action을 통한 `R CMD CHECK`에는 다소 시간이 소요되기 때문에 우선 개발중인 PC에서 `R CMD CHECK`를 완료한 이후에 실행하는 것을 권장한다.

물론 rhub에는 github나 public repository가 아닌 경우를 위한 안내도 있지만, 이는 대부분의 R 패키지, 특히 CRAN과는 크게 연관이 없기 때문에 별도로 서술하지 않는다. 

:::

::: {.content-visible when-profile="en"}

In the example used, replace <OWNER> with jhk0530, <REPOSITORY> with gemini.R, and <WORKFLOW_FILE> with rhub.yaml.

Please note that this `R CMD CHECK` through Github Action takes some time, so it is recommended to run it after completing `R CMD CHECK` on the PC under development.

Of course, rhub also provides guidance for cases other than github or public repositories, but this is not described separately because it is not closely related to most R packages, especially CRAN.

:::

::: {.content-visible when-profile="jp"}

使用した例では、<OWNER>をjhk0530、<REPOSITORY>をgemini.R、<WORKFLOW_FILE>をrhub.yamlに置き換えます。

このGithub Actionを介した`R CMD CHECK`には時間がかかるため、開発中のPCで`R CMD CHECK`を完了した後に実行することをお勧めします。

もちろん、rhubはgithubやpublicリポジトリ以外の場合についてのガイダンスも提供していますが、これはほとんどのRパッケージ、特にCRANとはあまり関係がないため、別途説明しません。

:::

## Summary

::: {.content-visible when-profile="ko"}

이번 포스팅에서는 R 패키지 개발자를 위한 Github Action을 활용하기 위한 `rhub` 패키지를 소개했다. 이를 통해 R 패키지 개발자는 로컬 환경에서 뿐 아니라 다양한 OS에서의 `R CMD CHECK`를 통해 패키지의 오류를 최소화하고 더 좋은 패키지를 만들 수 있을 것이다.

원문을 포함한 더 자세한 정보는 <a href='https://blog.r-hub.io/2024/04/11/rhub2/' target = "_blank">rhub의 블로그 </a>에서도 확인할 수 있다.

::: 

::: {.content-visible when-profile="en"}

In this post, I introduced the `rhub` package for R package developers to use Github Action. Through this, R package developers can minimize package errors and create better packages through `R CMD CHECK` on various OS, not only in the local environment.

For more detailed information, including the original text, you can also check the <a href='https://blog.r-hub.io/2024/04/11/rhub2/' target = "_blank">rhub blog</a>.

**Content Translated with DeepL Translator and Github Copilot**

:::

::: {.content-visible when-profile="jp"}

この投稿では、Rパッケージ開発者が Github Actionを使用するための`rhub`パッケージを紹介しました。これにより、Rパッケージ開発者はローカル環境だけでなく、さまざまなOSでの`R CMD CHECK`を通じてパッケージエラーを最小限に抑え、より良いパッケージを作成することができます。

詳細な情報は、<a href='https://blog.r-hub.io/2024/04/11/rhub2/' target = "_blank">rhubブログ</a>でも確認できます。

**DeepL TranslatorおよびGithub Copilotで翻訳されたコンテンツ**

:::